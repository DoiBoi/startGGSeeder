import pandas as pd
import query as q
import json
# import seeder as s

videogames = {} 

tournaments = ["okizeme", "okizeme-countdown-30", "okizeme-3-1", "okizeme-the-final", "okizeme-14-1"
               "okizeme-12-1", "okizeme-a-fighting-game-monthly", "okizeme-16-1"]

def get_player_ids_and_games(tournament_name):
    """
    Retrieves each player's ID and the unique videogames they've played,
    then returns the results in a Pandas DataFrame.
    Only the videogame IDs are collected, not the individual sets.
    """
    i = 1
    player_names = []
    player_ids = []
    entrants = []

    while True:
        result = q.run_query(q.participant_query, {"tourneySlug": tournament_name, "page": i, "perPage": 5})
        if (result['data']['tournament'] is None):
            break
        participants = result['data']['tournament']['participants']['nodes']

        # look into participants
        for participant in participants:
            player_ids.append(participant['player']['id'])
            player_names.append(participant['player']['gamerTag'])
            entrants.append(participant['entrants'])

        # Break if we've reached the last page
        totalPages = result['data']['tournament']['participants']['pageInfo']['totalPages']
        if (i > totalPages):
            break
        i += 1

    return pd.DataFrame({'player_id': player_ids, 'player_name': player_names, 'entrants': entrants})

def append_to_dataframe(df, row):
    if row['player_id'] in df['player_id'].values:
        # Find index for the matching player_id
        idx = df.index[df['player_id'] == row['player_id']][0]
        existing_entrants = df.at[idx, 'entrants']
        # Merge the two lists of entrants
        if row['entrants'] is not None and existing_entrants is not None:
            merged_entrants = existing_entrants + row['entrants']
            df.at[idx, 'entrants'] = merged_entrants
        elif row['entrants'] is not None:
            df.at[idx, 'entrants'] = row['entrants']
    else:
        # Wrap the row in a DataFrame before concatenating
        df = pd.concat([df, pd.DataFrame([row])], ignore_index=True)
    update_videogame_registry(row)
    return df

def update_videogame_registry(row):
    if row['entrants'] is not None:
        for entrant in row['entrants']:
            game = entrant['event']['videogame']
            if game['displayName'] not in videogames:
                videogames[game['displayName']] = game['id']

def iterate_through_tournament_series(tournament_series, num_tournaments, df=None):
    data = {'player_id': [], 'player_name': [], 'entrants': []}
    
    if df is None:
        new_df = pd.DataFrame(data)
    else:
        new_df = df

    for i in range(1, num_tournaments + 1):
        ith_df = get_player_ids_and_games(tournament_series + "-" + str(i))
        for index, row in ith_df.iterrows():
            new_df = append_to_dataframe(new_df, row)

    return new_df

def iterate_through_tournament_array(tournaments, df=None):
    data = {'player_id': [], 'player_name': [], 'entrants': []}
    
    if df is None:
        new_df = pd.DataFrame(data)
    else:
        new_df = df

    for tournament in tournaments:
        ith_df = get_player_ids_and_games(tournament)
        for index, row in ith_df.iterrows():
            new_df = append_to_dataframe(new_df, row)

    return new_df

def append_tournament(df, tournament_name):
    ith_df = get_player_ids_and_games(tournament_name)
    for index, row in ith_df.iterrows():
        df = append_to_dataframe(df, row)
    return df

def generate_point(entrants, videogame):
    """
    Generates a point for each unique videogame played by a player.
    """
    points = 0.0
    for entrant in entrants:
        if not entrant['isDisqualified']:
            event = q.run_query(q.event_entrant_query, {"entrantId": entrant['id']})
            videogame_id = event['data']['entrant']['event']['videogame']['id']
            if videogame_id == videogame and event['data']['entrant']['standing'] is not None:
                numEntrants = event['data']['entrant']['event']['numEntrants']
                placement = event['data']['entrant']['standing']['placement']
                points = float(numEntrants/placement)
    return points

def generate_elo(df):
    """
    For each videogame in the 'videogames' dictionary, generate a DataFrame
    where each row corresponds to a player and the points they earned in that game.
    
    Parameters:
        df (pd.DataFrame): DataFrame generated by iterating through tournament(s),
                           containing 'player_id', 'player_name', and 'entrants'.
    
    Returns:
        dict: A dictionary mapping each videogame's displayName to its respective DataFrame.
    """
    elo_dict = {}
    for game_name, game_id in videogames.items():
        elo_data = []
        for _, row in df.iterrows():
            entrants = row['entrants']
            # Use generate_point to calculate the player's points for this game.
            points = generate_point(entrants, game_id) if entrants is not None else 0.0
            elo_data.append({
                'player_id': row['player_id'],
                'player_name': row['player_name'],
                'points': points
            })
        elo_df = pd.DataFrame(elo_data)
        elo_df.sort_values(by='points', ascending=False, inplace=True)
        elo_df.reset_index(drop=True, inplace=True)
        elo_dict[game_name] = elo_df
    return elo_dict

# Example usage:
oki_df = iterate_through_tournament_array(["okizeme-49"])
oki_df.to_csv("oki_df.csv", index=False)
print(oki_df)

# After processing, generate ELO dataframes for each videogame.
elo_dataframes = generate_elo(oki_df)
for game, df_game in elo_dataframes.items():
    print(f"ELO for {game}:")
    print(df_game)
    df_game.to_csv(f"{game}_elo.csv", index=False)
    
with open('games.json', 'w') as games:
    json.dump(videogames, games)

